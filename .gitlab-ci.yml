variables:
  USERNAME: tech_finnomena
  APP_PASSWORD: $APP_PASSWORD
  TEAM_NAME: nextspace
  SUB_GROUP_NAME: ai
  REPO_CONFIG: https://tech_finnomena:$GITLAB_ACCESS_TOKEN@gitlab.finnomena.com/finnomena/$TEAM_NAME/$SUB_GROUP_NAME/$CI_PROJECT_NAME-config.git

include:
- project: "finnomena/finno-template-ci"
  ref: "v1.0.0"
  file:
  - build-deploy-template.yml
  - container-scanning-template.yml

stages:
- publish_staging
- container_scanning
- update_staging
- publish_prod
- update_prod

publish_staging:
  stage: publish_staging
  image: docker:20.10.6
  before_script:
    - until docker info; do sleep 1; done
    - echo $SERVICEACCOUNT | base64 -d > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://gcr.io
  script:
    - >
      docker build -t $CI_PROJECT_NAME
      --build-arg AMPLITUDE_ID=$AMPLITUDE_ID_INT
      --build-arg CLARITY_ID=$CLARITY_ID_INT
      --build-arg SERVICE_URL=$SERVICE_URL
      --build-arg GTM_ID=$GTM_ID_INT
      --build-arg BASE_URL=$BASE_URL_INT
      --build-arg FINNO_AUTH_URL=$FINNO_AUTH_URL_INT
      --build-arg FINNO_AUTH_CLIENT_ID=$FINNO_AUTH_CLIENT_ID_INT
      --build-arg FINNO_AUTH_SECRET=$FINNO_AUTH_SECRET_INT -f Dockerfile .
    - docker tag $CI_PROJECT_NAME $GCR_IMAGE_STAGING:latest
    - docker push $GCR_IMAGE_STAGING:latest
    - docker tag $CI_PROJECT_NAME $GCR_IMAGE_STAGING:$CI_COMMIT_SHORT_SHA
    - docker push $GCR_IMAGE_STAGING:$CI_COMMIT_SHORT_SHA
    - echo $CI_COMMIT_SHORT_SHA > variable-gitlab
  artifacts:
    paths:
      - variable-gitlab
    expire_in: 60 minutes
  only:
    - integration

publish_uat:
  stage: publish_staging
  image: docker:20.10.6
  before_script:
    - until docker info; do sleep 1; done
    - echo $SERVICEACCOUNT | base64 -d > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://gcr.io
  script:
    - >
      docker build -t $CI_PROJECT_NAME
      --build-arg AMPLITUDE_ID=$AMPLITUDE_ID_UAT
      --build-arg CLARITY_ID=$CLARITY_ID_UAT
      --build-arg SERVICE_URL=$SERVICE_URL
      --build-arg GTM_ID=$GTM_ID_UAT
      --build-arg BASE_URL=$BASE_URL_UAT
      --build-arg FINNO_AUTH_URL=$FINNO_AUTH_URL_UAT
      --build-arg FINNO_AUTH_CLIENT_ID=$FINNO_AUTH_CLIENT_ID_UAT
      --build-arg FINNO_AUTH_SECRET=$FINNO_AUTH_SECRET_UAT -f Dockerfile .
    - docker tag $CI_PROJECT_NAME $GCR_IMAGE_STAGING:latest
    - docker push $GCR_IMAGE_STAGING:latest
    - docker tag $CI_PROJECT_NAME $GCR_IMAGE_STAGING:$CI_COMMIT_SHORT_SHA
    - docker push $GCR_IMAGE_STAGING:$CI_COMMIT_SHORT_SHA
    - echo $CI_COMMIT_SHORT_SHA > variable-gitlab
  artifacts:
    paths:
      - variable-gitlab
    expire_in: 60 minutes
  only:
    - qa-6
    - uat

publish_prod:
  stage: publish_prod
  image: docker:20.10.6
  before_script:
    - until docker info; do sleep 1; done
    - echo $SERVICEACCOUNT_PROD | base64 -d > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://gcr.io
  script:
    - >
      docker build -t $CI_PROJECT_NAME
      --build-arg AMPLITUDE_ID=$AMPLITUDE_ID
      --build-arg CLARITY_ID=$CLARITY_ID
      --build-arg SERVICE_URL=$SERVICE_URL
      --build-arg GTM_ID=$GTM_ID
      --build-arg BASE_URL=$BASE_URL
      --build-arg FINNO_AUTH_URL=$FINNO_AUTH_URL
      --build-arg FINNO_AUTH_CLIENT_ID=$FINNO_AUTH_CLIENT_ID
      --build-arg FINNO_AUTH_SECRET=$FINNO_AUTH_SECRET -f Dockerfile .
    - docker tag $CI_PROJECT_NAME $GCR_IMAGE_PROD:$CI_COMMIT_TAG
    - docker push $GCR_IMAGE_PROD:$CI_COMMIT_TAG
    - echo $CI_COMMIT_TAG > variable-gitlab
  artifacts:
    paths:
      - variable-gitlab
    expire_in: 60 minutes
  when: manual
  only:
    - tags
  except:
    - branches

update_development:
  stage: update_staging
  rules:
  - if: $GITLAB_CI # Always true so skip the job (which is inherited from the Finno's ci-template)
    when: never
  only: null

update_integration:
  stage: update_staging
  before_script:
  - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
  - git config --global user.email "tech@finnomena.com"
  - git config --global user.name "tech_finnomena"
  script:
  - cat variable-gitlab
  - export SHORT_SHA=$(cat variable-gitlab)
  - git clone $REPO_CONFIG
  - cd $CI_PROJECT_NAME-config
  - git checkout integration
  - git pull
  - cat kubernetes/values-int.yaml
  - sed -i "s/tag:\s.*/tag:\ \"$SHORT_SHA\"/g" kubernetes/values-int.yaml
  - cat kubernetes/values-int.yaml
  - git add -A
  - git commit -m "Auto release $CI_PROJECT_NAME:$SHORT_SHA on Integration"
  - git remote add gitlab $REPO_CONFIG
  - git push -f gitlab integration
  only:
  - integration

update_qa-6:
  stage: update_staging
  before_script:
  - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
  - git config --global user.email "tech@finnomena.com"
  - git config --global user.name "tech_finnomena"
  script:
  - cat variable-gitlab
  - export SHORT_SHA=$(cat variable-gitlab)
  - git clone $REPO_CONFIG
  - cd $CI_PROJECT_NAME-config
  - git checkout qa-6
  - git pull
  - cat kubernetes/values-qa-6.yaml
  - sed -i "s/tag:\s.*/tag:\ \"$SHORT_SHA\"/g" kubernetes/values-qa-6.yaml
  - cat kubernetes/values-qa-6.yaml
  - git add -A
  - git commit -m "Auto release $CI_PROJECT_NAME:$SHORT_SHA on UAT"
  - git remote add gitlab $REPO_CONFIG
  - git push -f gitlab qa-6
  only:
  - qa-6

update_prod:
  stage: update_prod
  before_script:
  - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
  - git config --global user.email "tech@finnomena.com"
  - git config --global user.name "tech_finnomena"
  script:
  - cat variable-gitlab
  - export COMMIT_TAG=$(cat variable-gitlab)
  - git clone $REPO_CONFIG
  - cd $CI_PROJECT_NAME-config
  - git checkout main
  - git pull
  - cat kubernetes/values-production.yaml
  - sed -i "s/tag:\s.*/tag:\ \"$COMMIT_TAG\"/g" kubernetes/values-production.yaml
  - cat kubernetes/values-production.yaml
  - git add -A
  - git commit -m "Auto release $CI_PROJECT_NAME:$COMMIT_TAG on production"
  - git tag "$COMMIT_TAG"
  - git remote add gitlab $REPO_CONFIG
  - git push gitlab main "$COMMIT_TAG"
  when: manual
  only:
  - tags
  except:
  - branches
